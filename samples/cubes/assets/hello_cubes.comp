#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D imgOutputColor; // Output for color texture
layout(rgba32f, binding = 1) uniform image2D imgOutputNormal; // Output for normal map texture

// Uniform to receive time from the application (in seconds)
uniform float u_time;

// --- Simple Hash-Based Noise Functions ---
// These functions generate pseudo-random values based on input coordinates.
// Combining them at different scales creates turbulent patterns.

// 1D hash function (for integer inputs)
float hash1D(int n) {
    n = (n << 13) ^ n;
    n = n * (n * n * 15731 + 789221) + 1376312589;
    return float(n & 0x7fffffff) / float(0x7fffffff); // Map to [0, 1]
}

// 2D hash function (for integer ivec2 inputs)
float hash2D(ivec2 p) {
    int n = p.x * 73856093 + p.y * 19349663;
    n = (n << 13) ^ n;
    n = n * (n * n * 15731 + 789221) + 1376312589;
    return float(n & 0x7fffffff) / float(0x7fffffff); // Map to [0, 1]
}

// Simple 2D Value Noise
// This function interpolates hash values at integer grid points.
float valueNoise2D(vec2 p) {
    ivec2 ip = ivec2(floor(p)); // Integer part of the coordinate
    vec2 fp = fract(p);         // Fractional part of the coordinate

    // Get hash values at the four corners of the grid cell
    float v00 = hash2D(ip);
    float v10 = hash2D(ip + ivec2(1, 0));
    float v01 = hash2D(ip + ivec2(0, 1));
    float v11 = hash2D(ip + ivec2(1, 1));

    // Smooth interpolation using a cubic function (6t^5 - 15t^4 + 10t^3)
    // This specific function is common in Perlin-like noise for smoother results
    vec2 smooth_p = fp * fp * fp * (fp * (fp * 6.0 - 15.0) + 10.0);

    // Bilinear interpolation
    float interp_x1 = mix(v00, v10, smooth_p.x);
    float interp_x2 = mix(v01, v11, smooth_p.x);

    return mix(interp_x1, interp_x2, smooth_p.y); // Final interpolated noise value
}

// --- Fractional Brownian Motion (FBM) ---
// Combines multiple octaves of noise at different frequencies and amplitudes
// to create more detailed and natural-looking turbulence.
float fbm(vec2 p) {
    float value = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;
    const int num_octaves = 5; // Number of noise layers

    for (int i = 0; i < num_octaves; ++i) {
        value += valueNoise2D(p * frequency) * amplitude;
        frequency *= 2.0;      // Double the frequency for the next octave
        amplitude *= 0.5;      // Halve the amplitude for the next octave
        p += vec2(100.0, 100.0); // Offset to avoid artifacts
    }
    return value;
}

void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy); // Pixel coordinate

    // Image dimensions
    vec2 image_size = vec2(gl_NumWorkGroups.xy);

    // Normalized coordinates (0.0 to 1.0)
    vec2 uv = vec2(texelCoord) / image_size;

    // --- Animated Noise Generation ---
    // Use FBM to create a turbulent pattern.
    // Offset the coordinates by time to make the pattern move.
    // Different time scales and offsets for different noise layers can enhance the effect.

    // Base noise coordinates, scaled to control the overall size of the lava features
    // Adjusted scale to zoom out the pattern
    float pattern_scale = 30.0; // Store scale in a variable for clarity
    vec2 noise_coords = uv * pattern_scale;

    // Add time-based movement to the noise coordinates
    float flow_speed_x = 0.2;
    float flow_speed_y = 0.3;
    vec2 animated_noise_coords = noise_coords + vec2(u_time * flow_speed_x, u_time * flow_speed_y);

    // Calculate the final noise value using FBM on the animated coordinates
    float noise_value = fbm(animated_noise_coords);

    // --- Color Mapping (Lava Gradient) ---
    // Map the noise_value (typically in the range [0, 1]) to a lava color gradient.
    // A simple way is to use smoothstep to define color transitions based on noise value thresholds.

    vec4 color1 = vec4(0.0, 0.0, 0.0, 1.0); // Black (coolest)
    vec4 color2 = vec4(0.5, 0.1, 0.0, 1.0); // Dark Red
    vec4 color3 = vec4(0.9, 0.4, 0.1, 1.0); // Orange
    vec4 color4 = vec4(1.0, 0.8, 0.0, 1.0); // Yellow (hottest)
    vec4 color5 = vec4(1.0, 1.0, 1.0, 1.0); // White (hottest core - optional)

    vec4 output_color;

    // Use smoothstep to blend between colors based on noise value ranges
    output_color = mix(color1, color2, smoothstep(0.0, 0.3, noise_value));
    output_color = mix(output_color, color3, smoothstep(0.2, 0.5, noise_value));
    output_color = mix(output_color, color4, smoothstep(0.4, 0.7, noise_value));
    // output_color = mix(output_color, color5, smoothstep(0.6, 0.9, noise_value));

    // Write the color to the first output image
    imageStore(imgOutputColor, texelCoord, output_color);

    // --- Normal Map Calculation ---
    // Calculate the gradient of the noise function using finite differences.
    // The gradient vector (dx, dy) points in the direction of the steepest ascent.
    // The normal vector is perpendicular to the surface, related to the gradient.

    // Define a small epsilon for sampling offsets
    // This should be small relative to the noise feature size, but not too small (numerical stability)
    vec2 epsilon = vec2(1.0 / image_size.x, 1.0 / image_size.y) * 0.5; // Offset by half a pixel in UV space

    // Sample the noise at slightly offset coordinates
    float noise_dx = fbm(animated_noise_coords + vec2(epsilon.x * pattern_scale, 0.0)); // Noise value slightly to the right
    float noise_dy = fbm(animated_noise_coords + vec2(0.0, epsilon.y * pattern_scale)); // Noise value slightly below

    // Calculate the gradient components (approximated)
    // The change in noise value for a step in x or y
    float gradient_x = noise_dx - noise_value;
    float gradient_y = noise_dy - noise_value;

    // Construct the normal vector (x, y, z)
    // The Z component represents the "height" or "bumpiness" derived from the noise value.
    // The strength of the normal map effect is controlled by the 'bump_strength'
    float bump_strength = 10.0; // Adjusted this value to make bumps more pronounced
    vec3 normal_vector = normalize(vec3(gradient_x * bump_strength,
                                        gradient_y * bump_strength,
                                        1.0)); // Z component is typically 1.0 for a heightmap-derived normal

    // Normal vectors have components in the range [-1, 1].
    // Image textures typically store values in [0, 1].
    // We need to map the normal vector components from [-1, 1] to [0, 1] for storage.
    // Mapping: value_0_to_1 = (value_neg1_to_1 * 0.5) + 0.5
    vec4 normal_output = vec4(normal_vector * 0.5 + 0.5, 1.0); // Store mapped normal in RGB, Alpha is 1.0

    // Write the encoded normal vector to the second output image
    imageStore(imgOutputNormal, texelCoord, normal_output);
}
